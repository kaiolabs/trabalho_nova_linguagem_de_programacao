{
  "business_logic": [
    {
      "name": "Definição de Notas Musicais",
      "description": "Regras para definição de frequências das notas musicais em Hz",
      "implementation_location": "A-musica.txt:1-8"
    },
    {
      "name": "Definição de Ritmos",
      "description": "Regras para definição de valores temporais de durações de notas",
      "implementation_location": "A-musica.txt:10-15"
    },
    {
      "name": "Estruturação Musical",
      "description": "Definição de seções musicais, suas propriedades e composição",
      "implementation_location": "A-musica.txt:17-40"
    },
    {
      "name": "Instrumentação",
      "description": "Regras para definição de instrumentos, timbre e volume",
      "implementation_location": "A-musica.txt:42-47"
    },
    {
      "name": "Composição Musical",
      "description": "Regras para definição da estrutura completa da música",
      "implementation_location": "A-musica.txt:49-53"
    },
    {
      "name": "Mapeamento de Notas para Frequências",
      "description": "Conversão de notas musicais (dó, ré, mi, etc.) para suas respectivas frequências em Hz. Por exemplo, lá = 440Hz como padrão.",
      "implementation_location": "src/audio_engine.py (planejado)"
    },
    {
      "name": "Mapeamento de Durações para Tempos",
      "description": "Conversão de valores de duração musical (semibreve, mínima, etc.) para valores de tempo em segundos.",
      "implementation_location": "src/audio_engine.py (planejado)"
    },
    {
      "name": "Processamento de Sequências Musicais",
      "description": "Lógica para interpretação e execução de sequências de notas musicais, respeitando durações e pausas.",
      "implementation_location": "src/transformer.py (planejado)"
    },
    {
      "name": "Validação de Notas Musicais",
      "description": "Verificação se as notas utilizadas estão corretamente definidas e dentro do intervalo válido.",
      "implementation_location": "src/parser.py e src/linter.py (planejados)"
    },
    {
      "name": "Validação de Estrutura Musical",
      "description": "Verificação da estrutura geral do programa musical, garantindo que todos os elementos estão corretamente definidos e organizados.",
      "implementation_location": "src/parser.py e src/linter.py (planejados)"
    },
    {
      "name": "Transformação da AST para Código Python",
      "description": "Processo de conversão da árvore sintática abstrata para código Python executável que utiliza bibliotecas de áudio.",
      "implementation_location": "src/transformer.py (planejado)"
    },
    {
      "name": "Execução de Programas na MelodyScript",
      "description": "Pipeline completo de processamento e execução de programas na MelodyScript, desde a leitura do arquivo fonte até a reprodução de áudio.",
      "implementation_location": "src/melodyscript.py (planejado)"
    },
    {
      "name": "Sintaxe do 'Olá Mundo' da MelodyScript",
      "description": "Regras específicas da sintaxe para o programa 'Olá Mundo' na MelodyScript, que deve incluir declaração de música, sequência de notas e comando de execução.",
      "implementation_location": "examples/ola_mundo.mscr (planejado)"
    },
    {
      "name": "Regras de Escopo e Visibilidade",
      "description": "Definição de como elementos musicais (notas, ritmos, estruturas) podem ser referenciados dentro do programa.",
      "implementation_location": "src/parser.py (planejado)"
    },
    {
      "name": "Execução de Funções Definidas pelo Usuário",
      "description": "O interpretador deve permitir a definição e execução de funções pelo usuário. As funções podem receber parâmetros e executar comandos dentro de seu corpo. O escopo de variáveis dentro de uma função é local e temporário durante sua execução.",
      "implementation_location": "src/core/interpretador.py (método _executar_comando_funcao)"
    },
    {
      "name": "Iteração sobre Acordes e Coleções",
      "description": "A linguagem suporta a iteração sobre elementos de acordes e outras coleções usando a construção 'para cada'. A variável de iteração assume o valor de cada elemento da coleção durante a execução do bloco. É possível iterar sobre uma coleção em ordem reversa usando a função 'reverso'.",
      "implementation_location": "src/linguagem/parser_comandos.py (processamento de comandos 'para_cada'), src/core/interpretador.py (método _executar_comando_para_cada)"
    },
    {
      "name": "Processamento de Comandos Musicais",
      "description": "Comandos como 'tocar', 'pausa', 'configurar_envelope' são processados pelo interpretador e convertidos em operações na engine de áudio",
      "implementation_location": "src/core/interpretador.py (métodos _executar_comando_*)"
    },
    {
      "name": "Definição e Uso de Acordes",
      "description": "Acordes podem ser definidos como conjuntos de notas e referenciados pelo nome. Também é possível usar acordes literais com a sintaxe <nota1 nota2 ...>",
      "implementation_location": "src/linguagem/parser_definicoes.py (método processar_definicoes_acordes)"
    },
    {
      "name": "Suporte a Estruturas de Controle",
      "description": "A linguagem suporta estruturas de controle como condicionais (se-senao) e repetições (repetir n vezes)",
      "implementation_location": "src/linguagem/parser_comandos.py, src/core/interpretador.py"
    },
    {
      "name": "Processamento de Parâmetros Globais",
      "description": "Configurações globais como tempo (BPM), instrumento, envelope ADSR e forma de onda são processadas e aplicadas a toda a execução",
      "implementation_location": "src/linguagem/parser_definicoes.py (método processar_definicoes_globais)"
    },
    {
      "name": "Execução Multi-escopo com Isolamento de Variáveis",
      "description": "O interpretador mantém diferentes níveis de escopo para variáveis (global, função, iteração) para garantir o isolamento adequado e evitar conflitos de nomes",
      "implementation_location": "src/core/interpretador.py (propriedades variaveis e escopo_atual)"
    },
    {
      "name": "Tratamento de Strings Literais em Condições",
      "description": "Strings literais em expressões condicionais são tratadas adequadamente, removendo as aspas para comparação",
      "implementation_location": "src/core/interpretador.py (método _avaliar_condicao)"
    }
  ]
} 