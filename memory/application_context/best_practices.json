{
  "best_practices": [
    {
      "name": "Validação Completa de Tokens",
      "description": "Implementar validação completa de todos os tokens da linguagem antes da execução para garantir compilação segura",
      "rationale": "Previne execução de código com erros de sintaxe, fornece feedback claro ao usuário e garante que apenas código válido seja executado",
      "examples": ["ValidadorTokens class", "Integração no parser principal", "Feedback visual com cores"],
      "anti_patterns": ["Validar apenas alguns tokens", "Executar código com erros de sintaxe", "Feedback de erro sem contexto"]
    },
    {
      "name": "Nunca Substituir Valores Inválidos",
      "description": "JAMAIS substituir automaticamente valores inválidos por valores padrão - sempre parar a execução e mostrar erro",
      "rationale": "Substituições automáticas mascaram erros do programador e podem causar comportamentos inesperados. O compilador deve ser rigoroso e transparente",
      "examples": ["Lançar ValueError para notas inválidas", "Parar execução imediatamente", "Mostrar lista de valores válidos"],
      "anti_patterns": ["Substituir nota inválida por 'lá'", "Usar duração padrão para duração inválida", "Continuar execução com valores incorretos"]
    },
    {
      "name": "Feedback Visual com Cores",
      "description": "Usar códigos ANSI para exibir erros em vermelho e sucessos em verde no terminal",
      "rationale": "Melhora a experiência do usuário ao tornar os erros mais visíveis e fáceis de identificar",
      "examples": ["\\033[91m para vermelho", "\\033[92m para verde", "Emojis para categorizar mensagens"],
      "anti_patterns": ["Texto simples sem destaque", "Mensagens de erro pouco claras", "Falta de categorização visual"]
    },
    {
      "name": "Validação em Camadas",
      "description": "Implementar validação em múltiplas camadas: tokens, estruturas, semântica",
      "rationale": "Garante detecção abrangente de erros em diferentes níveis de abstração",
      "examples": ["ValidadorTokens para tokens", "ProcessadorComandos para comandos", "Parser para estruturas"],
      "anti_patterns": ["Validação única e superficial", "Misturar diferentes tipos de validação", "Não separar responsabilidades"]
    },
    {
      "name": "Interface CLI Intuitiva",
      "description": "Fornecer comandos claros e separados para diferentes funcionalidades",
      "rationale": "Facilita o uso da linguagem separando validação (lint) da execução",
      "examples": ["Comando 'executar' para execução", "Comando 'lint' para validação", "Ajuda contextual"],
      "anti_patterns": ["Comandos confusos", "Misturar validação e execução", "Falta de documentação"]
    }
  ]
} 